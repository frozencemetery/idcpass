#!/usr/bin/env python3

import json
import os
import random
import subprocess
import sys

from typing import Any, Dict, IO, List, Tuple

path = os.path.expanduser("~/.idcpass")

# Wrapper to produce more readable output and cleaner diffs
def jdump(obj: Dict[str, Dict[str, str]], f: IO[str]) -> None:
    return json.dump(obj, f, indent=4, separators=(",", ": "), sort_keys=True)

def init() -> None:
    if os.path.exists(path):
        print(f"Error: file already exists at: {path}", file=sys.stderr)
        exit(1)

    with open(path, "w") as f:
        jdump({}, f)
    exit(0)

def get_db() -> Any:
    if not os.path.exists(path):
        print(f"Error: no database found at: {path}", file=sys.stderr)
        exit(1)

    with open(path, "r") as f:
        return json.load(f)

def get_prompted(prompt: str) -> str:
    sys.stdout.write(prompt)
    sys.stdout.flush()
    res = sys.stdin.readline()
    if len(res) > 0 and res[-1] == '\n':
        res = res[:-1]
    return res

def get_int(prompt: str) -> int:
    res = get_prompted(prompt)
    return int(res) if len(res) > 0 else 0

def gen(length: int, cd: List[Tuple[int, str]]) -> str:
    sysrandom = random.SystemRandom()
    cd.append((0, "qwertyuiopasdfghjklzxcvbnm"))
    while True:
        total = 0
        p = []
        for n, pool in reversed(sorted(cd)):
            total += n
            if n == 0:
                n = length - total

            p += sysrandom.choices(pool, k=n)

        sysrandom.shuffle(p)
        password = ''.join(p)
        print(f"generated: {password}")
        res = get_prompted("Is this okay? (blank for yes): ")
        if len(res) == 0:
            return password

def add() -> None:
    db = get_db()
    service = get_prompted("Service: ")
    if len(service) == 0:
        print("Empty service entry; aborting", file=sys.stderr)
        exit(1)
    elif service in db:
        print("Service already exists; aborting", file=sys.stderr)
        exit(1)

    username = get_prompted("Username: ")
    password = get_prompted("Password (blank to generate): ")

    if len(password) == 0:
        cd = []
        print("idcpass defaults to lowercase alpha.")
        n = get_int("Number uppercase (blank for 0): ")
        if n != 0:
            cd.append((n, "QWERTYUIOPASDFGHJKLZXCVBNM"))
        n = get_int("Number numbers (blank for 0): ")
        if n != 0:
            cd.append((n, "1234567890"))
        n = get_int("Number symbols (blank for 0): ")
        if n != 0:
            cd.append((n, "`-=~!@#$%^&*()_+[]\{}|;':\",./<>?"))
        while True:
            cc = get_prompted(
                "Define extra character class (blank when done): ")
            if len(cc) == 0:
                break
            n = get_int("Number from class: ")
            if n > 0:
                cd.append((n, cc))

        length = get_int("Total length: ")
        password = gen(length, cd)

    db[service] = {"username": username, "password": password}
    with open(path, "w") as f:
        jdump(db, f)
    exit(0)

def delete() -> None:
    db = get_db()
    service = get_prompted("Service: ")
    if len(service) == 0:
        print("Empty service entry; aborting", file=sys.stderr)
        exit(1)
    elif service not in db:
        print("Service not found in database; aborting", file=sys.stderr)
        exit(1)
    del(db[service])
    with open(path, "w") as f:
        jdump(db, f)
    exit(0)

def lookup() -> None:
    db = get_db()
    service = get_prompted("Service: ")
    if len(service) == 0:
        print("Empty service entry; aborting", file=sys.stderr)
        exit(1)
    elif service not in db:
        print("Service not found in database; aborting", file=sys.stderr)
        exit(1)

    print(f"Username: {db[service]['username']}")
    print(f"Password: {db[service]['password']}")
    exit(0)

def list() -> None:
    db = get_db()
    print("\n".join(db.keys()))
    exit(0)

def get_dmenu(prompt: str, items: List[str]) -> str:
    # subprocess.communicate with input won't close stdin.  Don't know why.
    cmd = ["dmenu", "-p", prompt]
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                         text=True)
    assert(p.stdin and p.stdout) # appease mypy
    p.stdin.write("\n".join(items))
    p.stdin.close()
    res = p.stdout.read(-1)
    return res[:-1] if len(res) > 0 and res[-1] == '\n' else res

def xsend(password: str) -> int:
    # Try local, fall back to systemwide
    try:
        p = subprocess.Popen("./xfake", stdin=subprocess.PIPE, text=True)
    except FileNotFoundError:
        p = subprocess.Popen("xfake", stdin=subprocess.PIPE, text=True)

    assert(p.stdin) # appease mypy
    p.stdin.write(password)
    p.stdin.close()
    return p.wait()

def x() -> None:
    db = get_db()
    service = get_dmenu("Service: ", db.keys())
    if len(service) == 0:
        print("Empty service entry; aborting", file=sys.stderr)
        exit(1)
    elif service not in db:
        print("Service not found in database; aborting", file=sys.stderr)
        exit(1)

    password = db[service]["password"]
    exit(xsend(password))

def usage() -> None:
    u = f"Usage: {sys.argv[0]} init|add|lookup|x\n" \
        "    init: create a new store\n" \
        "    add: create a new entry in the store\n" \
        "    delete: remove an entry from the store\n" \
        "    lookup: text lookup of an entry from the store\n" \
        "    list: list services present in the store\n" \
        "    x: lookup an entry with dmenu, then type result using X11\n"
    print(u, file=sys.stderr)
    exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
    elif sys.argv[1] == "init":
        init()
    elif sys.argv[1] in ["add", "create", "new"]:
        add()
    elif sys.argv[1] in ["delete", "del", "remove", "rm"]:
        delete()
    elif sys.argv[1] == "lookup":
        lookup()
    elif sys.argv[1] in ["list", "ls"]:
        list()
    elif sys.argv[1] == "x":
        x()
    usage()
